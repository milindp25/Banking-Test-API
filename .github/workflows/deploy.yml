name: Spring Boot CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17 - Amazon Corretto
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test

      - name: Package application
        run: ./gradlew bootJar

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-app
          path: build/libs/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-app

      - name: List files
        run: ls -la

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.AWS_EC2_SSH_KEY }}

      - name: Debug SSH
        run: |
          echo "Checking SSH configuration..."
          ls -la ~/.ssh || echo "SSH directory not found"
          echo "Testing SSH connection..."
          ssh -vvv ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} 'echo SSH connection successful'

      - name: Add EC2 to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.AWS_EC2_HOST }} >> ~/.ssh/known_hosts
          cat ~/.ssh/known_hosts

      - name: Transfer JAR file to EC2
        run: |
          echo "Attempting to transfer file..."
          scp -v *.jar ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }}:~/app.jar

      - name: Deploy to EC2
        run: |
          echo "Connecting to EC2 instance..."
          ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} '
            echo "Connected successfully"
            echo "Checking for running application..."
            if pgrep -f "java -jar.*app.jar"; then
              echo "Stopping existing application..."
              sudo pkill -f "java -jar.*app.jar"
            fi
          
            echo "Starting application with environment variables..."
            nohup java -jar \
              -DDB_URL=${{ secrets.DB_URL }} \
              -DDB_USERNAME=${{ secrets.DB_USERNAME }} \
              -DDB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -DJWT_SECRET=${{ secrets.JWT_SECRET }} \
              ~/app.jar > ~/app.log 2>&1 &
          
            echo "Waiting to ensure app starts properly..."
            sleep 10
            if pgrep -f "java -jar.*app.jar"; then
              echo "Application deployed successfully"
            else
              echo "Application failed to start"
              cat ~/app.log
              exit 1
            fi
          '